// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Core.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - CoreRoot

@implementation CoreRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - CoreRoot_FileDescriptor

static GPBFileDescriptor *CoreRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"org.dash.platform.dapi.v0"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GetStatusRequest

@implementation GetStatusRequest


typedef struct GetStatusRequest__storage_ {
  uint32_t _has_storage_[1];
} GetStatusRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetStatusRequest class]
                                     rootClass:[CoreRoot class]
                                          file:CoreRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetStatusRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetStatusResponse

@implementation GetStatusResponse

@dynamic hasVersion, version;
@dynamic hasTime, time;
@dynamic status;
@dynamic syncProgress;
@dynamic hasChain, chain;
@dynamic hasMasternode, masternode;
@dynamic hasNetwork, network;

typedef struct GetStatusResponse__storage_ {
  uint32_t _has_storage_[1];
  GetStatusResponse_Status status;
  GetStatusResponse_Version *version;
  GetStatusResponse_Time *time;
  GetStatusResponse_Chain *chain;
  GetStatusResponse_Masternode *masternode;
  GetStatusResponse_Network *network;
  double syncProgress;
} GetStatusResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "version",
        .dataTypeSpecific.className = GPBStringifySymbol(GetStatusResponse_Version),
        .number = GetStatusResponse_FieldNumber_Version,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetStatusResponse__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = GPBStringifySymbol(GetStatusResponse_Time),
        .number = GetStatusResponse_FieldNumber_Time,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetStatusResponse__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = GetStatusResponse_Status_EnumDescriptor,
        .number = GetStatusResponse_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetStatusResponse__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "syncProgress",
        .dataTypeSpecific.className = NULL,
        .number = GetStatusResponse_FieldNumber_SyncProgress,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetStatusResponse__storage_, syncProgress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "chain",
        .dataTypeSpecific.className = GPBStringifySymbol(GetStatusResponse_Chain),
        .number = GetStatusResponse_FieldNumber_Chain,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetStatusResponse__storage_, chain),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "masternode",
        .dataTypeSpecific.className = GPBStringifySymbol(GetStatusResponse_Masternode),
        .number = GetStatusResponse_FieldNumber_Masternode,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetStatusResponse__storage_, masternode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "network",
        .dataTypeSpecific.className = GPBStringifySymbol(GetStatusResponse_Network),
        .number = GetStatusResponse_FieldNumber_Network,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GetStatusResponse__storage_, network),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetStatusResponse class]
                                     rootClass:[CoreRoot class]
                                          file:CoreRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetStatusResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GetStatusResponse_Status_RawValue(GetStatusResponse *message) {
  GPBDescriptor *descriptor = [GetStatusResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetStatusResponse_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetGetStatusResponse_Status_RawValue(GetStatusResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [GetStatusResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetStatusResponse_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum GetStatusResponse_Status

GPBEnumDescriptor *GetStatusResponse_Status_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "NotStarted\000Syncing\000Ready\000Error\000";
    static const int32_t values[] = {
        GetStatusResponse_Status_NotStarted,
        GetStatusResponse_Status_Syncing,
        GetStatusResponse_Status_Ready,
        GetStatusResponse_Status_Error,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GetStatusResponse_Status)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:GetStatusResponse_Status_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL GetStatusResponse_Status_IsValidValue(int32_t value__) {
  switch (value__) {
    case GetStatusResponse_Status_NotStarted:
    case GetStatusResponse_Status_Syncing:
    case GetStatusResponse_Status_Ready:
    case GetStatusResponse_Status_Error:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GetStatusResponse_Version

@implementation GetStatusResponse_Version

@dynamic protocol;
@dynamic software;
@dynamic agent;

typedef struct GetStatusResponse_Version__storage_ {
  uint32_t _has_storage_[1];
  uint32_t protocol;
  uint32_t software;
  NSString *agent;
} GetStatusResponse_Version__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "protocol",
        .dataTypeSpecific.className = NULL,
        .number = GetStatusResponse_Version_FieldNumber_Protocol,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetStatusResponse_Version__storage_, protocol),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "software",
        .dataTypeSpecific.className = NULL,
        .number = GetStatusResponse_Version_FieldNumber_Software,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetStatusResponse_Version__storage_, software),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "agent",
        .dataTypeSpecific.className = NULL,
        .number = GetStatusResponse_Version_FieldNumber_Agent,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetStatusResponse_Version__storage_, agent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetStatusResponse_Version class]
                                     rootClass:[CoreRoot class]
                                          file:CoreRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetStatusResponse_Version__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(GetStatusResponse)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetStatusResponse_Time

@implementation GetStatusResponse_Time

@dynamic now;
@dynamic offset;
@dynamic median;

typedef struct GetStatusResponse_Time__storage_ {
  uint32_t _has_storage_[1];
  uint32_t now;
  int32_t offset;
  uint32_t median;
} GetStatusResponse_Time__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "now",
        .dataTypeSpecific.className = NULL,
        .number = GetStatusResponse_Time_FieldNumber_Now,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetStatusResponse_Time__storage_, now),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "offset",
        .dataTypeSpecific.className = NULL,
        .number = GetStatusResponse_Time_FieldNumber_Offset,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetStatusResponse_Time__storage_, offset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "median",
        .dataTypeSpecific.className = NULL,
        .number = GetStatusResponse_Time_FieldNumber_Median,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetStatusResponse_Time__storage_, median),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetStatusResponse_Time class]
                                     rootClass:[CoreRoot class]
                                          file:CoreRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetStatusResponse_Time__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(GetStatusResponse)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetStatusResponse_Chain

@implementation GetStatusResponse_Chain

@dynamic name;
@dynamic headersCount;
@dynamic blocksCount;
@dynamic bestBlockHash;
@dynamic difficulty;
@dynamic chainWork;
@dynamic isSynced;
@dynamic syncProgress;

typedef struct GetStatusResponse_Chain__storage_ {
  uint32_t _has_storage_[1];
  uint32_t headersCount;
  uint32_t blocksCount;
  NSString *name;
  NSData *bestBlockHash;
  NSData *chainWork;
  double difficulty;
  double syncProgress;
} GetStatusResponse_Chain__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = GetStatusResponse_Chain_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetStatusResponse_Chain__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "headersCount",
        .dataTypeSpecific.className = NULL,
        .number = GetStatusResponse_Chain_FieldNumber_HeadersCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetStatusResponse_Chain__storage_, headersCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "blocksCount",
        .dataTypeSpecific.className = NULL,
        .number = GetStatusResponse_Chain_FieldNumber_BlocksCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetStatusResponse_Chain__storage_, blocksCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "bestBlockHash",
        .dataTypeSpecific.className = NULL,
        .number = GetStatusResponse_Chain_FieldNumber_BestBlockHash,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetStatusResponse_Chain__storage_, bestBlockHash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "difficulty",
        .dataTypeSpecific.className = NULL,
        .number = GetStatusResponse_Chain_FieldNumber_Difficulty,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetStatusResponse_Chain__storage_, difficulty),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "chainWork",
        .dataTypeSpecific.className = NULL,
        .number = GetStatusResponse_Chain_FieldNumber_ChainWork,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetStatusResponse_Chain__storage_, chainWork),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "isSynced",
        .dataTypeSpecific.className = NULL,
        .number = GetStatusResponse_Chain_FieldNumber_IsSynced,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "syncProgress",
        .dataTypeSpecific.className = NULL,
        .number = GetStatusResponse_Chain_FieldNumber_SyncProgress,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GetStatusResponse_Chain__storage_, syncProgress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetStatusResponse_Chain class]
                                     rootClass:[CoreRoot class]
                                          file:CoreRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetStatusResponse_Chain__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(GetStatusResponse)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetStatusResponse_Masternode

@implementation GetStatusResponse_Masternode

@dynamic status;
@dynamic proTxHash;
@dynamic posePenalty;
@dynamic isSynced;
@dynamic syncProgress;

typedef struct GetStatusResponse_Masternode__storage_ {
  uint32_t _has_storage_[1];
  GetStatusResponse_Masternode_Status status;
  uint32_t posePenalty;
  NSData *proTxHash;
  double syncProgress;
} GetStatusResponse_Masternode__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = GetStatusResponse_Masternode_Status_EnumDescriptor,
        .number = GetStatusResponse_Masternode_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetStatusResponse_Masternode__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "proTxHash",
        .dataTypeSpecific.className = NULL,
        .number = GetStatusResponse_Masternode_FieldNumber_ProTxHash,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetStatusResponse_Masternode__storage_, proTxHash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "posePenalty",
        .dataTypeSpecific.className = NULL,
        .number = GetStatusResponse_Masternode_FieldNumber_PosePenalty,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetStatusResponse_Masternode__storage_, posePenalty),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isSynced",
        .dataTypeSpecific.className = NULL,
        .number = GetStatusResponse_Masternode_FieldNumber_IsSynced,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "syncProgress",
        .dataTypeSpecific.className = NULL,
        .number = GetStatusResponse_Masternode_FieldNumber_SyncProgress,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GetStatusResponse_Masternode__storage_, syncProgress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetStatusResponse_Masternode class]
                                     rootClass:[CoreRoot class]
                                          file:CoreRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetStatusResponse_Masternode__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(GetStatusResponse)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GetStatusResponse_Masternode_Status_RawValue(GetStatusResponse_Masternode *message) {
  GPBDescriptor *descriptor = [GetStatusResponse_Masternode descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetStatusResponse_Masternode_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetGetStatusResponse_Masternode_Status_RawValue(GetStatusResponse_Masternode *message, int32_t value) {
  GPBDescriptor *descriptor = [GetStatusResponse_Masternode descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetStatusResponse_Masternode_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum GetStatusResponse_Masternode_Status

GPBEnumDescriptor *GetStatusResponse_Masternode_Status_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000WaitingForProtx\000PoseBanned\000Remov"
        "ed\000OperatorKeyChanged\000ProtxIpChanged\000Rea"
        "dy\000Error\000";
    static const int32_t values[] = {
        GetStatusResponse_Masternode_Status_Unknown,
        GetStatusResponse_Masternode_Status_WaitingForProtx,
        GetStatusResponse_Masternode_Status_PoseBanned,
        GetStatusResponse_Masternode_Status_Removed,
        GetStatusResponse_Masternode_Status_OperatorKeyChanged,
        GetStatusResponse_Masternode_Status_ProtxIpChanged,
        GetStatusResponse_Masternode_Status_Ready,
        GetStatusResponse_Masternode_Status_Error,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GetStatusResponse_Masternode_Status)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:GetStatusResponse_Masternode_Status_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL GetStatusResponse_Masternode_Status_IsValidValue(int32_t value__) {
  switch (value__) {
    case GetStatusResponse_Masternode_Status_Unknown:
    case GetStatusResponse_Masternode_Status_WaitingForProtx:
    case GetStatusResponse_Masternode_Status_PoseBanned:
    case GetStatusResponse_Masternode_Status_Removed:
    case GetStatusResponse_Masternode_Status_OperatorKeyChanged:
    case GetStatusResponse_Masternode_Status_ProtxIpChanged:
    case GetStatusResponse_Masternode_Status_Ready:
    case GetStatusResponse_Masternode_Status_Error:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GetStatusResponse_NetworkFee

@implementation GetStatusResponse_NetworkFee

@dynamic relay;
@dynamic incremental;

typedef struct GetStatusResponse_NetworkFee__storage_ {
  uint32_t _has_storage_[1];
  double relay;
  double incremental;
} GetStatusResponse_NetworkFee__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relay",
        .dataTypeSpecific.className = NULL,
        .number = GetStatusResponse_NetworkFee_FieldNumber_Relay,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetStatusResponse_NetworkFee__storage_, relay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "incremental",
        .dataTypeSpecific.className = NULL,
        .number = GetStatusResponse_NetworkFee_FieldNumber_Incremental,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetStatusResponse_NetworkFee__storage_, incremental),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetStatusResponse_NetworkFee class]
                                     rootClass:[CoreRoot class]
                                          file:CoreRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetStatusResponse_NetworkFee__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(GetStatusResponse)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetStatusResponse_Network

@implementation GetStatusResponse_Network

@dynamic peersCount;
@dynamic hasFee, fee;

typedef struct GetStatusResponse_Network__storage_ {
  uint32_t _has_storage_[1];
  uint32_t peersCount;
  GetStatusResponse_NetworkFee *fee;
} GetStatusResponse_Network__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peersCount",
        .dataTypeSpecific.className = NULL,
        .number = GetStatusResponse_Network_FieldNumber_PeersCount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetStatusResponse_Network__storage_, peersCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "fee",
        .dataTypeSpecific.className = GPBStringifySymbol(GetStatusResponse_NetworkFee),
        .number = GetStatusResponse_Network_FieldNumber_Fee,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetStatusResponse_Network__storage_, fee),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetStatusResponse_Network class]
                                     rootClass:[CoreRoot class]
                                          file:CoreRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetStatusResponse_Network__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(GetStatusResponse)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBlockRequest

@implementation GetBlockRequest

@dynamic blockOneOfCase;
@dynamic height;
@dynamic hash_p;

typedef struct GetBlockRequest__storage_ {
  uint32_t _has_storage_[2];
  uint32_t height;
  NSString *hash_p;
} GetBlockRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "height",
        .dataTypeSpecific.className = NULL,
        .number = GetBlockRequest_FieldNumber_Height,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(GetBlockRequest__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "hash_p",
        .dataTypeSpecific.className = NULL,
        .number = GetBlockRequest_FieldNumber_Hash_p,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(GetBlockRequest__storage_, hash_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBlockRequest class]
                                     rootClass:[CoreRoot class]
                                          file:CoreRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBlockRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "block",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void GetBlockRequest_ClearBlockOneOfCase(GetBlockRequest *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - GetBlockResponse

@implementation GetBlockResponse

@dynamic block;

typedef struct GetBlockResponse__storage_ {
  uint32_t _has_storage_[1];
  NSData *block;
} GetBlockResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "block",
        .dataTypeSpecific.className = NULL,
        .number = GetBlockResponse_FieldNumber_Block,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBlockResponse__storage_, block),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBlockResponse class]
                                     rootClass:[CoreRoot class]
                                          file:CoreRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBlockResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BroadcastTransactionRequest

@implementation BroadcastTransactionRequest

@dynamic transaction;
@dynamic allowHighFees;
@dynamic bypassLimits;

typedef struct BroadcastTransactionRequest__storage_ {
  uint32_t _has_storage_[1];
  NSData *transaction;
} BroadcastTransactionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transaction",
        .dataTypeSpecific.className = NULL,
        .number = BroadcastTransactionRequest_FieldNumber_Transaction,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BroadcastTransactionRequest__storage_, transaction),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "allowHighFees",
        .dataTypeSpecific.className = NULL,
        .number = BroadcastTransactionRequest_FieldNumber_AllowHighFees,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "bypassLimits",
        .dataTypeSpecific.className = NULL,
        .number = BroadcastTransactionRequest_FieldNumber_BypassLimits,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BroadcastTransactionRequest class]
                                     rootClass:[CoreRoot class]
                                          file:CoreRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BroadcastTransactionRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BroadcastTransactionResponse

@implementation BroadcastTransactionResponse

@dynamic transactionId;

typedef struct BroadcastTransactionResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *transactionId;
} BroadcastTransactionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transactionId",
        .dataTypeSpecific.className = NULL,
        .number = BroadcastTransactionResponse_FieldNumber_TransactionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BroadcastTransactionResponse__storage_, transactionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BroadcastTransactionResponse class]
                                     rootClass:[CoreRoot class]
                                          file:CoreRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BroadcastTransactionResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTransactionRequest

@implementation GetTransactionRequest

@dynamic id_p;

typedef struct GetTransactionRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
} GetTransactionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = GetTransactionRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTransactionRequest__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransactionRequest class]
                                     rootClass:[CoreRoot class]
                                          file:CoreRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransactionRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTransactionResponse

@implementation GetTransactionResponse

@dynamic transaction;

typedef struct GetTransactionResponse__storage_ {
  uint32_t _has_storage_[1];
  NSData *transaction;
} GetTransactionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transaction",
        .dataTypeSpecific.className = NULL,
        .number = GetTransactionResponse_FieldNumber_Transaction,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTransactionResponse__storage_, transaction),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransactionResponse class]
                                     rootClass:[CoreRoot class]
                                          file:CoreRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransactionResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BlockHeadersWithChainLocksRequest

@implementation BlockHeadersWithChainLocksRequest

@dynamic fromBlockOneOfCase;
@dynamic fromBlockHash;
@dynamic fromBlockHeight;
@dynamic count;

typedef struct BlockHeadersWithChainLocksRequest__storage_ {
  uint32_t _has_storage_[2];
  uint32_t fromBlockHeight;
  uint32_t count;
  NSData *fromBlockHash;
} BlockHeadersWithChainLocksRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fromBlockHash",
        .dataTypeSpecific.className = NULL,
        .number = BlockHeadersWithChainLocksRequest_FieldNumber_FromBlockHash,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(BlockHeadersWithChainLocksRequest__storage_, fromBlockHash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "fromBlockHeight",
        .dataTypeSpecific.className = NULL,
        .number = BlockHeadersWithChainLocksRequest_FieldNumber_FromBlockHeight,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(BlockHeadersWithChainLocksRequest__storage_, fromBlockHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = BlockHeadersWithChainLocksRequest_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BlockHeadersWithChainLocksRequest__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BlockHeadersWithChainLocksRequest class]
                                     rootClass:[CoreRoot class]
                                          file:CoreRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BlockHeadersWithChainLocksRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "fromBlock",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void BlockHeadersWithChainLocksRequest_ClearFromBlockOneOfCase(BlockHeadersWithChainLocksRequest *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - BlockHeadersWithChainLocksResponse

@implementation BlockHeadersWithChainLocksResponse

@dynamic responsesOneOfCase;
@dynamic blockHeaders;
@dynamic chainLockSignatureMessages;

typedef struct BlockHeadersWithChainLocksResponse__storage_ {
  uint32_t _has_storage_[2];
  BlockHeaders *blockHeaders;
  ChainLockSignatureMessages *chainLockSignatureMessages;
} BlockHeadersWithChainLocksResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "blockHeaders",
        .dataTypeSpecific.className = GPBStringifySymbol(BlockHeaders),
        .number = BlockHeadersWithChainLocksResponse_FieldNumber_BlockHeaders,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(BlockHeadersWithChainLocksResponse__storage_, blockHeaders),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chainLockSignatureMessages",
        .dataTypeSpecific.className = GPBStringifySymbol(ChainLockSignatureMessages),
        .number = BlockHeadersWithChainLocksResponse_FieldNumber_ChainLockSignatureMessages,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(BlockHeadersWithChainLocksResponse__storage_, chainLockSignatureMessages),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BlockHeadersWithChainLocksResponse class]
                                     rootClass:[CoreRoot class]
                                          file:CoreRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BlockHeadersWithChainLocksResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "responses",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void BlockHeadersWithChainLocksResponse_ClearResponsesOneOfCase(BlockHeadersWithChainLocksResponse *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - BlockHeaders

@implementation BlockHeaders

@dynamic headersArray, headersArray_Count;

typedef struct BlockHeaders__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *headersArray;
} BlockHeaders__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "headersArray",
        .dataTypeSpecific.className = NULL,
        .number = BlockHeaders_FieldNumber_HeadersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BlockHeaders__storage_, headersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BlockHeaders class]
                                     rootClass:[CoreRoot class]
                                          file:CoreRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BlockHeaders__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChainLockSignatureMessages

@implementation ChainLockSignatureMessages

@dynamic messagesArray, messagesArray_Count;

typedef struct ChainLockSignatureMessages__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *messagesArray;
} ChainLockSignatureMessages__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messagesArray",
        .dataTypeSpecific.className = NULL,
        .number = ChainLockSignatureMessages_FieldNumber_MessagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChainLockSignatureMessages__storage_, messagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChainLockSignatureMessages class]
                                     rootClass:[CoreRoot class]
                                          file:CoreRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChainLockSignatureMessages__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetEstimatedTransactionFeeRequest

@implementation GetEstimatedTransactionFeeRequest

@dynamic blocks;

typedef struct GetEstimatedTransactionFeeRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t blocks;
} GetEstimatedTransactionFeeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "blocks",
        .dataTypeSpecific.className = NULL,
        .number = GetEstimatedTransactionFeeRequest_FieldNumber_Blocks,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetEstimatedTransactionFeeRequest__storage_, blocks),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetEstimatedTransactionFeeRequest class]
                                     rootClass:[CoreRoot class]
                                          file:CoreRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetEstimatedTransactionFeeRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetEstimatedTransactionFeeResponse

@implementation GetEstimatedTransactionFeeResponse

@dynamic fee;

typedef struct GetEstimatedTransactionFeeResponse__storage_ {
  uint32_t _has_storage_[1];
  double fee;
} GetEstimatedTransactionFeeResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fee",
        .dataTypeSpecific.className = NULL,
        .number = GetEstimatedTransactionFeeResponse_FieldNumber_Fee,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetEstimatedTransactionFeeResponse__storage_, fee),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetEstimatedTransactionFeeResponse class]
                                     rootClass:[CoreRoot class]
                                          file:CoreRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetEstimatedTransactionFeeResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransactionsWithProofsRequest

@implementation TransactionsWithProofsRequest

@dynamic fromBlockOneOfCase;
@dynamic hasBloomFilter, bloomFilter;
@dynamic fromBlockHash;
@dynamic fromBlockHeight;
@dynamic count;
@dynamic sendTransactionHashes;

typedef struct TransactionsWithProofsRequest__storage_ {
  uint32_t _has_storage_[2];
  uint32_t fromBlockHeight;
  uint32_t count;
  BloomFilter *bloomFilter;
  NSData *fromBlockHash;
} TransactionsWithProofsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bloomFilter",
        .dataTypeSpecific.className = GPBStringifySymbol(BloomFilter),
        .number = TransactionsWithProofsRequest_FieldNumber_BloomFilter,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransactionsWithProofsRequest__storage_, bloomFilter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fromBlockHash",
        .dataTypeSpecific.className = NULL,
        .number = TransactionsWithProofsRequest_FieldNumber_FromBlockHash,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TransactionsWithProofsRequest__storage_, fromBlockHash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "fromBlockHeight",
        .dataTypeSpecific.className = NULL,
        .number = TransactionsWithProofsRequest_FieldNumber_FromBlockHeight,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TransactionsWithProofsRequest__storage_, fromBlockHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = TransactionsWithProofsRequest_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransactionsWithProofsRequest__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sendTransactionHashes",
        .dataTypeSpecific.className = NULL,
        .number = TransactionsWithProofsRequest_FieldNumber_SendTransactionHashes,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransactionsWithProofsRequest class]
                                     rootClass:[CoreRoot class]
                                          file:CoreRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransactionsWithProofsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "fromBlock",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void TransactionsWithProofsRequest_ClearFromBlockOneOfCase(TransactionsWithProofsRequest *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - BloomFilter

@implementation BloomFilter

@dynamic vData;
@dynamic nHashFuncs;
@dynamic nTweak;
@dynamic nFlags;

typedef struct BloomFilter__storage_ {
  uint32_t _has_storage_[1];
  uint32_t nHashFuncs;
  uint32_t nTweak;
  uint32_t nFlags;
  NSData *vData;
} BloomFilter__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "vData",
        .dataTypeSpecific.className = NULL,
        .number = BloomFilter_FieldNumber_VData,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BloomFilter__storage_, vData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "nHashFuncs",
        .dataTypeSpecific.className = NULL,
        .number = BloomFilter_FieldNumber_NHashFuncs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BloomFilter__storage_, nHashFuncs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "nTweak",
        .dataTypeSpecific.className = NULL,
        .number = BloomFilter_FieldNumber_NTweak,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BloomFilter__storage_, nTweak),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "nFlags",
        .dataTypeSpecific.className = NULL,
        .number = BloomFilter_FieldNumber_NFlags,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BloomFilter__storage_, nFlags),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BloomFilter class]
                                     rootClass:[CoreRoot class]
                                          file:CoreRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BloomFilter__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransactionsWithProofsResponse

@implementation TransactionsWithProofsResponse

@dynamic responsesOneOfCase;
@dynamic rawTransactions;
@dynamic instantSendLockMessages;
@dynamic rawMerkleBlock;

typedef struct TransactionsWithProofsResponse__storage_ {
  uint32_t _has_storage_[2];
  RawTransactions *rawTransactions;
  InstantSendLockMessages *instantSendLockMessages;
  NSData *rawMerkleBlock;
} TransactionsWithProofsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rawTransactions",
        .dataTypeSpecific.className = GPBStringifySymbol(RawTransactions),
        .number = TransactionsWithProofsResponse_FieldNumber_RawTransactions,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TransactionsWithProofsResponse__storage_, rawTransactions),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "instantSendLockMessages",
        .dataTypeSpecific.className = GPBStringifySymbol(InstantSendLockMessages),
        .number = TransactionsWithProofsResponse_FieldNumber_InstantSendLockMessages,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TransactionsWithProofsResponse__storage_, instantSendLockMessages),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rawMerkleBlock",
        .dataTypeSpecific.className = NULL,
        .number = TransactionsWithProofsResponse_FieldNumber_RawMerkleBlock,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TransactionsWithProofsResponse__storage_, rawMerkleBlock),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransactionsWithProofsResponse class]
                                     rootClass:[CoreRoot class]
                                          file:CoreRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransactionsWithProofsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "responses",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void TransactionsWithProofsResponse_ClearResponsesOneOfCase(TransactionsWithProofsResponse *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - RawTransactions

@implementation RawTransactions

@dynamic transactionsArray, transactionsArray_Count;

typedef struct RawTransactions__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *transactionsArray;
} RawTransactions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transactionsArray",
        .dataTypeSpecific.className = NULL,
        .number = RawTransactions_FieldNumber_TransactionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RawTransactions__storage_, transactionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RawTransactions class]
                                     rootClass:[CoreRoot class]
                                          file:CoreRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RawTransactions__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - InstantSendLockMessages

@implementation InstantSendLockMessages

@dynamic messagesArray, messagesArray_Count;

typedef struct InstantSendLockMessages__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *messagesArray;
} InstantSendLockMessages__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messagesArray",
        .dataTypeSpecific.className = NULL,
        .number = InstantSendLockMessages_FieldNumber_MessagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(InstantSendLockMessages__storage_, messagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InstantSendLockMessages class]
                                     rootClass:[CoreRoot class]
                                          file:CoreRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InstantSendLockMessages__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
