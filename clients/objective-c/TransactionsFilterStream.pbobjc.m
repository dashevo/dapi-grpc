// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transactions_filter_stream.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "TransactionsFilterStream.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - TransactionsFilterStreamRoot

@implementation TransactionsFilterStreamRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - TransactionsFilterStreamRoot_FileDescriptor

static GPBFileDescriptor *TransactionsFilterStreamRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"org.dash.platform.dapi"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - TransactionsWithProofsRequest

@implementation TransactionsWithProofsRequest

@dynamic fromBlockOneOfCase;
@dynamic hasBloomFilter, bloomFilter;
@dynamic fromBlockHash;
@dynamic fromBlockHeight;
@dynamic count;
@dynamic sendTransactionHashes;

typedef struct TransactionsWithProofsRequest__storage_ {
  uint32_t _has_storage_[2];
  uint32_t fromBlockHeight;
  uint32_t count;
  BloomFilter *bloomFilter;
  NSData *fromBlockHash;
} TransactionsWithProofsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bloomFilter",
        .dataTypeSpecific.className = GPBStringifySymbol(BloomFilter),
        .number = TransactionsWithProofsRequest_FieldNumber_BloomFilter,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransactionsWithProofsRequest__storage_, bloomFilter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fromBlockHash",
        .dataTypeSpecific.className = NULL,
        .number = TransactionsWithProofsRequest_FieldNumber_FromBlockHash,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TransactionsWithProofsRequest__storage_, fromBlockHash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "fromBlockHeight",
        .dataTypeSpecific.className = NULL,
        .number = TransactionsWithProofsRequest_FieldNumber_FromBlockHeight,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TransactionsWithProofsRequest__storage_, fromBlockHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = TransactionsWithProofsRequest_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransactionsWithProofsRequest__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sendTransactionHashes",
        .dataTypeSpecific.className = NULL,
        .number = TransactionsWithProofsRequest_FieldNumber_SendTransactionHashes,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransactionsWithProofsRequest class]
                                     rootClass:[TransactionsFilterStreamRoot class]
                                          file:TransactionsFilterStreamRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransactionsWithProofsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "fromBlock",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void TransactionsWithProofsRequest_ClearFromBlockOneOfCase(TransactionsWithProofsRequest *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - BloomFilter

@implementation BloomFilter

@dynamic vData;
@dynamic nHashFuncs;
@dynamic nTweak;
@dynamic nFlags;

typedef struct BloomFilter__storage_ {
  uint32_t _has_storage_[1];
  uint32_t nHashFuncs;
  uint32_t nTweak;
  uint32_t nFlags;
  NSData *vData;
} BloomFilter__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "vData",
        .dataTypeSpecific.className = NULL,
        .number = BloomFilter_FieldNumber_VData,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BloomFilter__storage_, vData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "nHashFuncs",
        .dataTypeSpecific.className = NULL,
        .number = BloomFilter_FieldNumber_NHashFuncs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BloomFilter__storage_, nHashFuncs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "nTweak",
        .dataTypeSpecific.className = NULL,
        .number = BloomFilter_FieldNumber_NTweak,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BloomFilter__storage_, nTweak),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "nFlags",
        .dataTypeSpecific.className = NULL,
        .number = BloomFilter_FieldNumber_NFlags,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BloomFilter__storage_, nFlags),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BloomFilter class]
                                     rootClass:[TransactionsFilterStreamRoot class]
                                          file:TransactionsFilterStreamRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BloomFilter__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransactionsWithProofsResponse

@implementation TransactionsWithProofsResponse

@dynamic responsesOneOfCase;
@dynamic rawTransactions;
@dynamic instantSendLockMessages;
@dynamic rawMerkleBlock;

typedef struct TransactionsWithProofsResponse__storage_ {
  uint32_t _has_storage_[2];
  RawTransactions *rawTransactions;
  InstantSendLockMessages *instantSendLockMessages;
  NSData *rawMerkleBlock;
} TransactionsWithProofsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rawTransactions",
        .dataTypeSpecific.className = GPBStringifySymbol(RawTransactions),
        .number = TransactionsWithProofsResponse_FieldNumber_RawTransactions,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TransactionsWithProofsResponse__storage_, rawTransactions),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "instantSendLockMessages",
        .dataTypeSpecific.className = GPBStringifySymbol(InstantSendLockMessages),
        .number = TransactionsWithProofsResponse_FieldNumber_InstantSendLockMessages,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TransactionsWithProofsResponse__storage_, instantSendLockMessages),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rawMerkleBlock",
        .dataTypeSpecific.className = NULL,
        .number = TransactionsWithProofsResponse_FieldNumber_RawMerkleBlock,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TransactionsWithProofsResponse__storage_, rawMerkleBlock),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransactionsWithProofsResponse class]
                                     rootClass:[TransactionsFilterStreamRoot class]
                                          file:TransactionsFilterStreamRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransactionsWithProofsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "responses",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void TransactionsWithProofsResponse_ClearResponsesOneOfCase(TransactionsWithProofsResponse *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - RawTransactions

@implementation RawTransactions

@dynamic transactionsArray, transactionsArray_Count;

typedef struct RawTransactions__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *transactionsArray;
} RawTransactions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transactionsArray",
        .dataTypeSpecific.className = NULL,
        .number = RawTransactions_FieldNumber_TransactionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RawTransactions__storage_, transactionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RawTransactions class]
                                     rootClass:[TransactionsFilterStreamRoot class]
                                          file:TransactionsFilterStreamRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RawTransactions__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - InstantSendLockMessages

@implementation InstantSendLockMessages

@dynamic messagesArray, messagesArray_Count;

typedef struct InstantSendLockMessages__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *messagesArray;
} InstantSendLockMessages__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messagesArray",
        .dataTypeSpecific.className = NULL,
        .number = InstantSendLockMessages_FieldNumber_MessagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(InstantSendLockMessages__storage_, messagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InstantSendLockMessages class]
                                     rootClass:[TransactionsFilterStreamRoot class]
                                          file:TransactionsFilterStreamRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InstantSendLockMessages__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
